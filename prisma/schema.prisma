// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TopCategory {
  Pizza
  Else
}

enum Sizes {
  s
  m
  l
}

enum OrderStatus {
  pending
  processing
  completed
  delivered
}

enum IngredientCategory {
  topping
  sauce
}


model Item {
  id Int @id @default(autoincrement())
  name String
  image String?
  price Int
  discountPrice Int?
  incredients ItemIngredient[]
  addons ItemAddon[]
  sizes Size[]
  orders OrderItem[]
  coupon Coupon[]
  categoryId Int 
  category Category @relation(fields: [categoryId], references: [id])
  topCategory TopCategory

}

model Category {
  id Int @id @default(autoincrement())
  name String
  items Item[]
}

model Ingredient {
  id Int @id @default(autoincrement())
  name String
  price Int
  category IngredientCategory
  itemsAsIngredient ItemIngredient[]
  itemsAsAddon ItemAddon[]
}

model ItemIngredient {
  itemId Int
  ingredientId Int
  item Item @relation(fields: [itemId], references: [id],  onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id],  onDelete: Cascade)

  @@id([itemId, ingredientId])
}

model ItemAddon {
  itemId Int
  ingredientId Int
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id],  onDelete: Cascade)
  orderItemAddons OrderItemAddon[]

  @@id([itemId, ingredientId])
}




model Size {
  id      Int    @id @default(autoincrement())
  value   Sizes
  price Int
  itemId  Int    
  item    Item   @relation(fields: [itemId], references: [id],  onDelete: Cascade)
}



model Order {
  id String @id
  userId String?
  user User? @relation(fields: [userId], references: [id],  onDelete: Cascade)
  email String?
  name String?
  phone String?
  total Int
  takeaway Boolean
  status OrderStatus
  items    OrderItem[]
  usedCouponCode String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId String
  order Order @relation(fields: [orderId], references: [id],  onDelete: Cascade)
  itemId Int
  item Item @relation(fields: [itemId], references: [id],  onDelete: Cascade)
  size Sizes?
  quantity Int
  addons OrderItemAddon[]
  
}

model OrderItemAddon {
  orderItemId Int
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id],  onDelete: Cascade)
  itemId Int
  ingredientId Int
  itemAddon   ItemAddon @relation(fields: [itemId, ingredientId], references: [itemId, ingredientId],  onDelete: Cascade)
  quantity Int

  @@id([orderItemId, itemId, ingredientId])
}

model Coupon {
  id Int @id @default(autoincrement())
  code String @unique
  discount Int
  itemId Int?
  userId String?
  item Item? @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedBy User[] @relation("UsedCoupons")
}



model User {
  id       String    @id
  email    String @unique
  email_verified Boolean 
  name     String
  hashed_password String
  role     Role @default(USER)
  sessions Session[]
  orders Order[]
  coupon Coupon[]
  usedCoupons Coupon[] @relation("UsedCoupons")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model email_verification_code {
  id      Int    @id @default(autoincrement())
  code String
  user_id String @unique
  email String
  expires_at DateTime
}