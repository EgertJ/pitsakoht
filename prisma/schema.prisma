// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TopCategory {
  Pizza
  Else
}

enum Sizes {
  s
  m
  l
}

enum IngredientCategory {
  topping
  sauce
}


model Item {
  id Int @id @default(autoincrement())
  name String
  image String?
  price Int
  discountPrice Int?
  incredients ItemIngredient[]
  addons ItemAddon[]
  sizes Size[]
  categoryId Int 
  category Category @relation(fields: [categoryId], references: [id])
  topCategory TopCategory

}

model Category {
  id Int @id @default(autoincrement())
  name String
  items Item[]
}

model Ingredient {
  id Int @id @default(autoincrement())
  name String
  price Int
  category IngredientCategory
  itemsAsIngredient ItemIngredient[]
  itemsAsAddon ItemAddon[]
}

model ItemIngredient {
  itemId Int
  ingredientId Int
  item Item @relation(fields: [itemId], references: [id],  onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id],  onDelete: Cascade)

  @@id([itemId, ingredientId])
}

model ItemAddon {
  itemId Int
  ingredientId Int
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id],  onDelete: Cascade)

  @@id([itemId, ingredientId])
}




model Size {
  id      Int    @id @default(autoincrement())
  value   Sizes
  price Int
  itemId  Int    
  item    Item   @relation(fields: [itemId], references: [id],  onDelete: Cascade)
}


model User {
  id       String    @id
  email    String @unique
  email_verified Boolean 
  name     String
  hashed_password String
  role     Role @default(USER)
  sessions Session[]
  email_verification_codes email_verification_code[]
  password_reset_tokens password_reset_token[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model email_verification_code {
  id      Int    @id @default(autoincrement())
  code String
  user_id String @unique
  user      User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  email String
  expires_at DateTime
}

model password_reset_token {
  token_hash String @unique
  user_id String
  user      User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  expires_at DateTime
}